import torch
import torch.nn as nn
from torchquad import Boole, MonteCarlo, Trapezoid

from .base_amplitude import BaseAmplitude
from nullingexplorer.model.spectrum import TorchQuadBlackBody
from nullingexplorer.model.transmission import DualChoppedDestructive
from nullingexplorer.model.instrument import MiYinBasicType
from nullingexplorer.utils import Constants
from nullingexplorer.utils import Configuration as cfg

class LocalZodiacalDust(BaseAmplitude):
    '''
    The photon emmision by local-zodiacal dust
    Reference to LIFE-II (doi:10.1051/0004-6361/202141958)
    '''
    def __init__(self):
        super(LocalZodiacalDust, self).__init__()
        # Register models
        self.spectrum = TorchQuadBlackBody()
        self.trans_map = DualChoppedDestructive()
        self.instrument = MiYinBasicType()
        # Constant parameters
        self.register_buffer('target_lon'   , cfg.get_property('target_longitude')     / Constants._radian_to_degree)
        self.register_buffer('target_lat'    , cfg.get_property('target_latitude')      / Constants._radian_to_degree)
        self.register_buffer('formation_lon', cfg.get_property('formation_longitude')  / Constants._radian_to_degree)
        self.register_buffer('mirror_diameter', cfg.get_property('mirror_diameter'))      # Diameter of each mirror (unit: meter)

        self.register_buffer('relative_lon', torch.pi - (self.target_lon - self.formation_lon))
        self.register_buffer('sun_radius_au', torch.tensor(6.955e8/Constants._au_to_meter))
        self.register_buffer('formation_location_au', torch.tensor(1.5))
        self.register_buffer('sun_tempurature', torch.tensor(5772.))
        self.register_buffer('effective_tempurature', torch.tensor(265.))
        self.register_buffer('optical_depth', torch.tensor(4.e-8))
        self.register_buffer('dust_albedo', torch.tensor(0.22))

        # Calculate exo-zodi
        self.register_buffer('local_zodi', torch.tensor([], dtype=torch.float64))  

    def init_local_zodi(self, data) -> torch.Tensor:
        dust_emmision   = self.spectrum(self.effective_tempurature, data)
        dust_reflection = self.dust_albedo * self.spectrum(self.sun_tempurature, data) * (self.sun_radius_au / self.formation_location_au)**2
        fov_area = torch.pi * (0.5*data.wavelength/self.mirror_diameter)**2
        self.local_zodi.data = self.optical_depth * (dust_emmision + dust_reflection) \
                                * torch.sqrt(torch.pi / torch.arccos(torch.cos(self.relative_lon) * torch.cos(self.target_lat))\
                                             / (torch.sin(self.target_lat)**2 + 0.36 * (data.wavelength/11e-6)**(-0.8)*torch.cos(self.target_lat)**2)) * fov_area

    def forward(self, data):
        # return the number of photons generated by the planet
        if len(self.local_zodi) == 0:
            self.init_local_zodi(data)

        return self.local_zodi

class LocalZodiacalDustFast(BaseAmplitude):
    '''
    The photon emmision by local-zodiacal dust
    Reference to LIFE-II (doi:10.1051/0004-6361/202141958)
    '''
    def __init__(self):
        super().__init__()
        # Register models
        self.spectrum = TorchQuadBlackBody()
        self.trans_map = DualChoppedDestructive()
        self.instrument = MiYinBasicType()
        # Constant parameters
        self.register_buffer('target_lon'   , cfg.get_property('target_longitude')     / Constants._radian_to_degree)
        self.register_buffer('target_lat'    , cfg.get_property('target_latitude')      / Constants._radian_to_degree)
        self.register_buffer('formation_lon', cfg.get_property('formation_longitude')  / Constants._radian_to_degree)
        self.register_buffer('mirror_diameter', cfg.get_property('mirror_diameter'))      # Diameter of each mirror (unit: meter)

        self.register_buffer('relative_lon', torch.pi - (self.target_lon - self.formation_lon))
        self.register_buffer('sun_radius_au', torch.tensor(6.955e8/Constants._au_to_meter))
        self.register_buffer('formation_location_au', torch.tensor(1.5))
        self.register_buffer('sun_tempurature', torch.tensor(5772.))
        self.register_buffer('effective_tempurature', torch.tensor(265.))
        self.register_buffer('optical_depth', torch.tensor(4.e-8))
        self.register_buffer('dust_albedo', torch.tensor(0.22))

        # Calculate exo-zodi
        self.register_buffer('local_zodi', torch.tensor([], dtype=torch.float64))  

    def init_local_zodi(self, data) -> torch.Tensor:
        phase_num = data.get_bin_number('phase')
        data_0 = data.select_data('phase', data.get_bins('phase')[0])
        dust_emmision   = self.spectrum(self.effective_tempurature, data_0).repeat(phase_num)
        dust_reflection = self.dust_albedo * self.spectrum(self.sun_tempurature, data_0).repeat(phase_num) * (self.sun_radius_au / self.formation_location_au)**2
        fov_area = torch.pi * (0.5*data.wavelength/self.mirror_diameter)**2
        self.local_zodi.data = self.optical_depth * (dust_emmision + dust_reflection) \
                                * torch.sqrt(torch.pi / torch.arccos(torch.cos(self.relative_lon) * torch.cos(self.target_lat))\
                                             / (torch.sin(self.target_lat)**2 + 0.36 * (data.wavelength/11e-6)**(-0.8)*torch.cos(self.target_lat)**2)) * fov_area

    def forward(self, data):
        # return the number of photons generated by the planet
        if len(self.local_zodi) == 0:
            self.init_local_zodi(data)

        return self.local_zodi
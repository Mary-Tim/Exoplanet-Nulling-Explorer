import torch
import torch.nn as nn
from torchquad import Boole

from nullingexplorer.model.spectrum import BaseSpectrum
from nullingexplorer.model.spectrum import UnbinnedBlackBody, BinnedBlackBody, TorchQuadBlackBody, InterpBlackBody
from nullingexplorer.utils import get_spectrum
from nullingexplorer.utils import Constants as cons
from nullingexplorer.utils import Configuration as cfg

class BlackBodySpectrum(BaseSpectrum):
    def __init__(self, spec='BinnedBlackBody'):
        super(BlackBodySpectrum, self).__init__()
        self.spectrum = get_spectrum(spec)()
        self.register_buffer('distance', cfg.get_property('distance') * cons._pc_to_meter) # Distance between target and format (unit: pc)
        self.radius = nn.Parameter(torch.tensor(6371.) * 1.e3) # Planet radius (unit: kilometer)
        self.temperature = nn.Parameter(torch.tensor(273.))  # Temperature of planet (unit: Kelvin)

        # Boundary of parameters
        self.boundary = {
            'radius': torch.tensor([1.e5, 1.e7]),
            'temperature': torch.tensor([100., 800.]),
        }

    def forward(self, data):
        # return the number of photons generated by the planet
        return torch.pi * (self.radius / (self.distance))**2 * self.spectrum(self.temperature, data)

class RelativeBlackBodySpectrum(BaseSpectrum):
    def __init__(self, spec='BinnedBlackBody'):
        super(RelativeBlackBodySpectrum, self).__init__()
        self.spectrum = get_spectrum(spec)()
        # Constant parameters
        self.register_buffer('distance', cfg.get_property('distance') * cons._pc_to_meter) # Distance between target and format (unit: pc)
        self.register_buffer('e_rad', torch.tensor(6371.) * 1e3) # Earth radius (unit: kilometer)
        self.register_buffer('e_temp', torch.tensor(285.)) # Earth temperature (unit: Kelvin)

        # Free parameters
        self.r_radius = nn.Parameter(torch.tensor(1.)) # Relative planet radius (unit: dimensionless)
        self.r_temperature = nn.Parameter(torch.tensor(1.))  # Relative temperature of planet (unit: dimensionless)

        # Boundary of parameters
        self.boundary = {
            'r_radius': torch.tensor([0., 5.]),
            'r_temperature': torch.tensor([0., 5.]),
        }

    def forward(self, data):
        # return the number of photons generated by the planet
        return torch.pi * (self.r_radius * self.e_rad / (self.distance))**2 * self.spectrum(self.r_temperature * self.e_temp, data)